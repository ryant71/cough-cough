AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys an EC2 AMI to a given VPC and subnet (qs-xxx)

Mappings:
  InstanceMap:
    downloader:
      InstanceType: 'm5.large'
      AmiId: 'ami-03cc8375791cb8bcf' # ubuntu 24.04 x86
    somepurpose:
      InstanceType: 't3.nano'
      AmiId: 'ami-03cc8375791cb8bcf' # ubuntu 24.04 x86

Parameters:
  Environment:
    Type: String
    Description: The environment.
    Default: miscellaneous
  SshKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: hg 
  Suffix:
    Type: String
    Description: How to ID this EC2 from others
    Default: downloader
  HostedZoneId:
    Type: String
    Description: The Route53 Hosted Zone that the hostname will be created in
  HostName:
    Type: String
    Description: The hostname of the EC2 instance
  BucketName:
    Type: String
    Description: The name of the S3 bucket where files will be uploaded to
  CertBotEmail:
    Type: String
    Description: The email address used for CertBot requests

Resources:
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [InstanceMap, !Ref Suffix, 'AmiId']
      InstanceType: !FindInMap [InstanceMap, !Ref Suffix, 'InstanceType']
      KeyName: !Ref 'SshKeyName'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 32
            VolumeType: gp2
            DeleteOnTermination: true
      SecurityGroupIds:
        - !GetAtt Ec2SecurityGroup.GroupId
      SubnetId:
        Fn::ImportValue:
          !Sub '${Environment}-PublicSubnetOne'
      UserData:
        Fn::Base64:
          !Sub
            |
            #!/bin/bash -xe
            echo "Begin UserData Setup..." >/tmp/setup.log
            echo "Variables: hostname=${HostName} suffix=${Suffix} environment=${Environment} bucketname=${BucketName} certbotemail${CertBotEmail}" >>/tmp/setup.log
            apt update -y 2>&1 >>/tmp/setup.log
            apt install transmission transmission-cli transmission-common transmission-daemon net-tools unzip nginx-light tree s3fs -y 2>&1 >>/tmp/setup.log
            echo "${Environment}-cfn-ec2-${Suffix}" > /etc/hostname
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" 2>&1 >>/tmp/setup.log
            unzip awscliv2.zip 2>&1 >>/tmp/awscli.log
            ./aws/install 2>&1 >>/tmp/awscli.log
            echo "S3..." >>/tmp/setup.log
            aws s3 ls 2>&1 >>/tmp/setup.log
            aws s3 cp "s3://${BucketName}/nginx-proxy.conf" /var/tmp/nginx-proxy.conf 2>&1 >>/tmp/setup.log
            aws s3 cp "s3://${BucketName}/init.sh" /var/tmp/init.sh 2>&1 >>/tmp/setup.log
            aws s3 cp "s3://${BucketName}/update-settings.py" /var/tmp/update-settings.py 2>&1 >>/tmp/setup.log
            aws s3 cp "s3://${BucketName}/letsencrypt.tgz" /var/tmp/letsencrypt.tgz 2>&1 >>/tmp/setup.log
            aws s3 rm "s3://${BucketName}/letsencrypt.tgz" 2>&1 >>/tmp/setup.log
            echo "Init..." >> /tmp/setup.log
            chmod +x /var/tmp/init.sh /var/tmp/update-settings.py 2>&1 >>/tmp/setup.log
            nohup /var/tmp/init.sh "${HostName}" "${Suffix}" "${Environment}" "${BucketName}" "${CertBotEmail}" 2>&1 >>/tmp/setup.log &
            echo "Finished UserData..." >>/tmp/setup.log
      Tags:
        - Key: 'environment'
          Value: !Ref 'Environment'
        - Key: 'Name'
          Value: !Sub '${Environment}-cfn-ec2-${Suffix}'
      IamInstanceProfile: !Ref InstanceProfile

  DomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref HostName
      Type: A
      TTL: '30'
      ResourceRecords:
        - !GetAtt MyEC2Instance.PublicIp

  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to SSH
      VpcId:
        Fn::ImportValue: !Sub '${Environment}-VPCId'
      SecurityGroupIngress:
      - IpProtocol: tcp
        CidrIp:
          Fn::ImportValue:
            !Sub '${Environment}-VpcCidrBlock'
        FromPort: 22
        ToPort: 22
      - IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        FromPort: 80
        ToPort: 80
      - IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        FromPort: 49152
        ToPort: 65535

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${Environment}-instance-profile'
      Path: /
      Roles:
      - !Ref Ec2InstanceRole

  Ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-cfn-ec2'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub '${Environment}-cfn-ec2-policy-cfn'
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudformation:SignalResource'
                  - 'cloudformation:DescribeStackResource'
                Resource: '*'
        - PolicyName: !Sub '${Environment}-cfn-ec2-policy-s3-fullaccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - s3:GetBucketLocation
                Resource: "*"
        - PolicyName: !Sub '${Environment}-cfn-ec2-policy-s3-listfolder'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${BucketName}"
        - PolicyName: !Sub '${Environment}-cfn-ec2-policy-s3-objectaccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource: !Sub "arn:aws:s3:::${BucketName}/*"
        - PolicyName: !Sub '${Environment}-cfn-ec2-parameterstore'
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Effect: 'Allow'
                Action: 
                  - 'ssm:GetParameter'
                  - 'ssm:GetParameters'
                  - 'ssm:GetParameterHistory'
                  - 'ssm:GetParametersByPath'
                Resource: 'arn:aws:ssm:::parameter/letsencrypt/*'
              - Effect: 'Allow'
                Action: 
                  - 'ssm:PutParameter'
                Resource: 'arn:aws:ssm:::parameter/letsencrypt/*'

Outputs:
  PrivateIpAddress:
    Description: Private IP address of EC2 instance
    Value: !GetAtt MyEC2Instance.PrivateIp
    Export:
      Name: !Sub '${Environment}-cfn-ec2-private-address'

  PublicIpAddress:
    Description: Public IP address of EC2 instance
    Value: !GetAtt MyEC2Instance.PublicIp
    Export:
      Name: !Sub '${Environment}-cfn-ec2-public-address'

  Ec2SecurityGroup:
    Description: SecurityGroup ID
    Value: !Ref Ec2SecurityGroup
    Export:
      Name: !Sub '${Environment}-cfn-ec2-download-secgrp'

  TransmissionUrl:
    Description: URL for transmission daemon
    Value: !Sub 'https://${HostName}/transmission/'
    Export:
      Name: !Sub '${Environment}-cfn-ec2-transmission-endpoint'

# end #
